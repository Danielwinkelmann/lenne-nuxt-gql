# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""User"""
type User {
  """ID of the persistence object"""
  id: ID

  """Created date"""
  createdAt: Date

  """Labels of the object"""
  labels: [String!]

  """Tags for the object"""
  tags: [String!]

  """Updated date"""
  updatedAt: Date

  """Email of the user"""
  email: String

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!]

  """Username of the user"""
  username: String

  """Verification state of the user"""
  verified: Boolean

  """Verified date"""
  verifiedAt: Date

  """URL to avatar file of the user"""
  avatar: String

  """ID of the user who created the object"""
  createdBy: String

  """ID of the user who last updated the object"""
  updatedBy: String
}

"""Result of find and count"""
type FindAndCountUsersResult {
  """Found users"""
  items: [User!]!

  """Total count (skip/offset and limit/take are ignored in the count)"""
  totalCount: Float!
}

"""CatalogPenalties"""
type CatalogPenalties {
  """ID of the persistence object"""
  id: ID

  """Created date"""
  createdAt: Date

  """Labels of the object"""
  labels: [String!]

  """Tags for the object"""
  tags: [String!]

  """Updated date"""
  updatedAt: Date

  """ID of the user who created the object"""
  createdBy: User

  """ID of the user who updated the object"""
  updatedBy: User

  """title of CatalogPenalties"""
  title: String!

  """description of CatalogPenalties"""
  description: String

  """price of CatalogPenalties"""
  price: Float!
}

"""Penalties"""
type Penalties {
  """ID of the persistence object"""
  id: ID

  """Created date"""
  createdAt: Date

  """Labels of the object"""
  labels: [String!]

  """Tags for the object"""
  tags: [String!]

  """Updated date"""
  updatedAt: Date

  """ID of the user who created the object"""
  createdBy: User

  """ID of the user who updated the object"""
  updatedBy: User

  """penalty of Penalties"""
  penalties: [CatalogPenalties!]!

  """user of Penalties"""
  user: User!

  """payed of Penalties"""
  payed: Boolean
}

"""Result of find and count Penaltiess"""
type FindAndCountPenaltiessResult {
  """Found Penaltiess"""
  items: [Penalties!]!

  """Total count (skip/offset and limit/take are ignored in the count)"""
  totalCount: Float!
}

"""Overview output"""
type OverviewOutput {
  """user"""
  user: User!

  """count"""
  count: Float!

  """price"""
  price: Float!
}

"""Result of find and count CatalogPenaltiess"""
type FindAndCountCatalogPenaltiessResult {
  """Found CatalogPenaltiess"""
  items: [CatalogPenalties!]!

  """Total count (skip/offset and limit/take are ignored in the count)"""
  totalCount: Float!
}

"""Authentication data"""
type Auth {
  """JavaScript Web Token (JWT)"""
  token: String

  """Refresh token"""
  refreshToken: String

  """User who signed in"""
  user: User!
}

"""Information about file"""
type FileInfo {
  """ID of the file"""
  id: String!

  """
  The size of each chunk in bytes. GridFS divides the document into chunks of size chunkSize, except for the last, which is only as large as needed. The default size is 255 kilobytes (kB)
  """
  chunkSize: Float

  """Content type"""
  contentType: String

  """Name of the file"""
  filename: String

  """The size of the document in bytes"""
  length: Float

  """The date the file was first stored"""
  uploadDate: Date
}

"""Metadata of API"""
type Meta {
  """Environment of API"""
  environment: String!

  """Title of API"""
  title: String!

  """Package name of API"""
  package: String!

  """Version of API"""
  version: String!
}

"""Any scalar type"""
scalar Any

"""Date custom scalar type"""
scalar Date

"""
JSON scalar type. Information on the exact schema of the JSON object is contained in the description of the field.
"""
scalar JSON

type Query {
  """Find users (via filter)"""
  findAndCountUsers(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    limit: Int

    """Alias for skip"""
    offset: Int

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Alias for limit"""
    take: Int

    """Input for filtering"""
    filter: FilterInput

    """
    Request only a specified number of samples from the filter results; if not specified, all results are returned.
    """
    samples: Float
  ): FindAndCountUsersResult!

  """Find users (via filter)"""
  findUsers(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    limit: Int

    """Alias for skip"""
    offset: Int

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Alias for limit"""
    take: Int

    """Input for filtering"""
    filter: FilterInput

    """
    Request only a specified number of samples from the filter results; if not specified, all results are returned.
    """
    samples: Float
  ): [User!]!

  """Get user with specified ID"""
  getUser(id: String!): User!

  """Get verified state of user with token"""
  getVerifiedState(token: String!): Boolean!

  """Request new password for user with email"""
  requestPasswordResetMail(email: String!): Boolean!

  """Get Meta"""
  getMeta: Meta!
  getFileInfo(filename: String!): FileInfo

  """Find CatalogPenaltiess (via filter)"""
  findAndCountCatalogPenaltiess(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    limit: Int

    """Alias for skip"""
    offset: Int

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Alias for limit"""
    take: Int

    """Input for filtering"""
    filter: FilterInput

    """
    Request only a specified number of samples from the filter results; if not specified, all results are returned.
    """
    samples: Float
  ): FindAndCountCatalogPenaltiessResult!

  """Find CatalogPenaltiess (via filter)"""
  findCatalogPenaltiess(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    limit: Int

    """Alias for skip"""
    offset: Int

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Alias for limit"""
    take: Int

    """Input for filtering"""
    filter: FilterInput

    """
    Request only a specified number of samples from the filter results; if not specified, all results are returned.
    """
    samples: Float
  ): [CatalogPenalties!]!

  """Get CatalogPenalties with specified ID"""
  getCatalogPenalties(id: String!): CatalogPenalties!

  """Find Penaltiess (via filter)"""
  findAndCountPenaltiess(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    limit: Int

    """Alias for skip"""
    offset: Int

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Alias for limit"""
    take: Int

    """Input for filtering"""
    filter: FilterInput

    """
    Request only a specified number of samples from the filter results; if not specified, all results are returned.
    """
    samples: Float
  ): FindAndCountPenaltiessResult!

  """Find Penaltiess (via filter)"""
  findPenaltiess(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    limit: Int

    """Alias for skip"""
    offset: Int

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Alias for limit"""
    take: Int

    """Input for filtering"""
    filter: FilterInput

    """
    Request only a specified number of samples from the filter results; if not specified, all results are returned.
    """
    samples: Float
  ): [Penalties!]!

  """Get Penalties with specified ID"""
  getPenalties(id: String!): Penalties!

  """Get Penalties overview"""
  penaltiesOverview(month: Float!): [OverviewOutput!]!
}

"""Sorting the returned elements"""
input SortInput {
  """Field that is to be used for sorting"""
  field: String!

  """SortInput order of the field"""
  order: SortOrderEnum!
}

"""SortInput order of items"""
enum SortOrderEnum {
  ASC
  DESC
}

"""
Input for filtering. The `singleFilter` will be ignored if the `combinedFilter` is set.
"""
input FilterInput {
  """Combination of multiple filters via logical operator"""
  combinedFilter: CombinedFilterInput

  """Filter for a single property"""
  singleFilter: SingleFilterInput
}

"""Combination of multiple filters via logical operator"""
input CombinedFilterInput {
  """Logical Operator to combine filters"""
  logicalOperator: LogicalOperatorEnum!

  """Filters to combine via logical operator"""
  filters: [FilterInput!]!
}

"""Logical operators to combine filters"""
enum LogicalOperatorEnum {
  AND
  NOR
  OR
}

"""Input for a configuration of a filter"""
input SingleFilterInput {
  """Convert value to ObjectId"""
  convertToObjectId: Boolean

  """Name of the property to be used for the filter"""
  field: String!

  """Process value as reference"""
  isReference: Boolean

  """
  [Negate operator](https://docs.mongodb.com/manual/reference/operator/query/not/)
  """
  not: Boolean

  """
  [Comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/)
  """
  operator: ComparisonOperatorEnum!

  """
  [Options](https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_options) for [REGEX](https://docs.mongodb.com/manual/reference/operator/query/regex/) operator
  """
  options: String

  """Value of the property"""
  value: JSON!
}

"""
[Comparison Operators](https://docs.mongodb.com/manual/reference/operator/query-comparison/) for filters
"""
enum ComparisonOperatorEnum {
  EQ
  GT
  GTE
  IN
  LT
  LTE
  NE
  NIN
  REGEX
}

type Mutation {
  """Logout user (from specific device)"""
  logout(allDevices: Boolean): Boolean!

  """Refresh tokens (for specific device)"""
  refreshToken: CoreAuthModel!

  """Sign in and get JWT token"""
  signIn(input: AuthSignInInput!): Auth!

  """Sign up user and get JWT token"""
  signUp(input: AuthSignUpInput!): Auth!

  """Create a new user"""
  createUser(input: UserCreateInput!): User!

  """Delete existing user"""
  deleteUser(id: String!): User!

  """Set new password for user with token"""
  resetPassword(token: String!, password: String!): Boolean!

  """Update existing user"""
  updateUser(input: UserInput!, id: String!): User!

  """Verify user with email"""
  verifyUser(token: String!): Boolean!
  deleteFile(filename: String!): FileInfo!
  uploadFile(file: Upload!): FileInfo!
  uploadFiles(files: [Upload!]!): Boolean!

  """Create a new CatalogPenalties"""
  createCatalogPenalties(input: CatalogPenaltiesCreateInput!): CatalogPenalties!

  """Delete existing CatalogPenalties"""
  deleteCatalogPenalties(id: String!): CatalogPenalties!

  """Update existing CatalogPenalties"""
  updateCatalogPenalties(id: String!, input: CatalogPenaltiesInput!): CatalogPenalties!

  """Create a new Penalties"""
  createPenalties(input: PenaltiesCreateInput!): Penalties!

  """Delete existing Penalties"""
  deletePenalties(id: String!): Penalties!

  """Update existing Penalties"""
  updatePenalties(id: String!, input: PenaltiesInput!): Penalties!
}

"""CoreAuth"""
type CoreAuthModel {
  """JavaScript Web Token (JWT)"""
  token: String

  """Refresh token"""
  refreshToken: String

  """Current user"""
  user: CoreUserModel!
}

"""User"""
type CoreUserModel {
  """ID of the persistence object"""
  id: ID

  """Created date"""
  createdAt: Date

  """Labels of the object"""
  labels: [String!]

  """Tags for the object"""
  tags: [String!]

  """Updated date"""
  updatedAt: Date

  """Email of the user"""
  email: String

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!]

  """Username of the user"""
  username: String

  """Verification state of the user"""
  verified: Boolean

  """Verified date"""
  verifiedAt: Date
}

"""Sign-in input"""
input AuthSignInInput {
  """Device ID (is created automatically if it is not set)"""
  deviceId: String

  """Device description"""
  deviceDescription: String

  """Email"""
  email: String!

  """Password"""
  password: String!
}

"""Sign-up input"""
input AuthSignUpInput {
  """Device ID (is created automatically if it is not set)"""
  deviceId: String

  """Device description"""
  deviceDescription: String

  """Email"""
  email: String!

  """Password"""
  password: String!

  """firstName"""
  firstName: String

  """lastName"""
  lastName: String
}

"""User input to create a new user"""
input UserCreateInput {
  """Email of the user"""
  email: String!

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!]

  """Username / alias of the user"""
  username: String

  """Password of the user"""
  password: String
}

"""User input"""
input UserInput {
  """Email of the user"""
  email: String

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!]

  """Username / alias of the user"""
  username: String

  """Password of the user"""
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""Input data to create a new CatalogPenalties"""
input CatalogPenaltiesCreateInput {
  """Title of CatalogPenalties"""
  title: String!

  """Description of CatalogPenalties"""
  description: String

  """Price of CatalogPenalties"""
  price: Float!
}

"""Input data to update an existing CatalogPenalties"""
input CatalogPenaltiesInput {
  """Title of CatalogPenalties"""
  title: String

  """Description of CatalogPenalties"""
  description: String

  """Price of CatalogPenalties"""
  price: Float
}

"""Input data to create a new Penalties"""
input PenaltiesCreateInput {
  """Penalty of Penalties"""
  penalties: [String!]!

  """User of Penalties"""
  user: [String!]!

  """Payed of Penalties"""
  payed: Boolean
}

"""Input data to update an existing Penalties"""
input PenaltiesInput {
  """Penalty of Penalties"""
  penalties: [String!]

  """User of Penalties"""
  user: [String!]

  """Payed of Penalties"""
  payed: Boolean
}

type Subscription {
  userCreated: User!
  catalogPenaltiesCreated: CatalogPenalties!
  penaltiesCreated: Penalties!
}